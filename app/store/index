import {
   applyMiddleware, combineReducers, compose, configureStore,
} from '@reduxjs/toolkit';
import thunk from 'redux-thunk';
import { createWrapper } from 'next-redux-wrapper';
import authReducer from '../features/auth/authSlice';

const middleware = [thunk];

const reducer = combineReducers({
  auth: authReducer,
});

const preloadedState = {
  auth: {
    authToken: null,
    isLoggedin: false,
    error: null,
  },
};

const store = configureStore(
  {
    reducer,
    middleware,
    // middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),
    devTools: process.env.NODE_ENV !== 'production',
    preloadedState,
  },
);
/*
const reducer = combineReducers({
  authReducer,
});

const store = configureStore(
  {
    reducer,
    devTools: true,
  },
  compose(applyMiddleware(...middleware)),
); */

export default store;
export const wrapper = createWrapper(store);
